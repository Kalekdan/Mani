/*
Testing all the basics of the language
*/
load "munit";

let t <- newTester();
t.header("Basics");

let x = 0;

x <- 1;
t.assertEquals(x, 1, "Test <- assign operator");

x << 0;
t.assertEquals(x, 0, "Test << assign operator");

x = x + 1;
t.assertEquals(x, 1, "Test + operator");

x++;
t.assertEquals(x, 2, "Test ++ after opeator");

++x;
t.assertEquals(x, 4, "Test ++ before operator");

x = x - 1;
t.assertEquals(x, 3, "Test - operator");

x--;
t.assertEquals(x, 2, "Test -- after operator");

--x;
t.assertEquals(x, 0, "Test -- before operator");

x += 43;
t.assertEquals(x, 43, "Test += operator");

x -= 3;
t.assertEquals(x, 40, "Test -= operator");

x = x % 3;
t.assertEquals(x, 1, "Test % operator");

x++;
x = x ** 2;
t.assertEquals(x, 4, "Test ** power operator");

x = x * 2;
t.assertEquals(x, 8, "Test * operator");

x = x / 4;
t.assertEquals(x, 2, "Test / operator");

let y = nil;
x -> y;
t.assertEquals(y, 2, "Test -> copy operator");

x = "String";
x -> y;
x = "String1";
t.assertEquals(y, x, "Test -> copy operator changing");

{
    x = 10;
    let z = "test";
}
t.assertEquals(x, 10, "Test block statement");

t.results();