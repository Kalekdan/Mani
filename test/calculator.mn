import("maps");
use("std");
use("types");

let operators = Map();

fn add(a,b) { return a + b; }
fn minus(a,b) { return a - b; }
fn divide(a,b) { return a / b; }
fn times(a,b) { return a * b; }

operators.add("+", add);
operators.add("-", minus);
operators.add("/", divide);
operators.add("*", times);

fn calculate(expression) {
    let pos = 0;
    let len = size(expression);

    fn isDigit(c) {
        c = toNumber(c);
        if (c >= 48 and c <= 57) {
            return true;
        }
        return false;
    }

    fn parseNumber() {
        let buffer = "";
        while (pos < len and isDigit(charAt(expression, pos))) {
            say toChar(charAt(expression, pos));
            buffer += toChar(charAt(expression, pos));
            pos++;
        }
        return number(buffer);
    }

    fn parseOperation() {
        while (pos < len and !operators.exists(toChar(charAt(expression, pos)))) {
            pos ++;
        }

        return operations.get(toChar(charAt(expression, pos++)));
    }

    let num1 = parseNumber();
    let op = parseOperation();
    let num2 = parseNumber();
    say num1;
    say num2;
    return op(num1, num2);
}

say calculate("2+2");