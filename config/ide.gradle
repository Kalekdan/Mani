ext {
    // Activate copyright conventions
    ideaActivateCopyright = { Node iprNode ->
        // Setup copyright statement injection
        def copyrightManager = iprNode.find { it.@name == 'CopyrightManager' }
        copyrightManager.@default = 'Mani'
        def copyright = copyrightManager.appendNode("copyright")
        copyright.appendNode("option", [name: "notice", value: 'Copyright ' + Calendar.getInstance().get(Calendar.YEAR) + 'MÃ¡ni.'])
        copyright.appendNode("option", [name: "keywords", value: "Copyright"])
        copyright.appendNode("option", [name: "allowReplaceKeyword", value: ""])
        copyright.appendNode("option", [name: "myName", value: "Mani"])
        copyright.appendNode("option", [name: "myLocal", value: "true"])

        def langOptions = copyrightManager.appendNode("LanguageOptions", [name: "__TEMPLATE__"])
        langOptions.appendNode("option", [name: "addBlankAfter", value: "false"])
    }

    ideaActivateGradle = { Node iprNode ->
        def gradleSettings = iprNode.component.find { it.@name == 'GradleSettings' }
        if (gradleSettings == null) {
            gradleSettings = iprNode.appendNode('component', [name: 'GradleSettings'])
            gradleSettings.appendNode('option', [name: 'linkedProjectPath', value: '$PROJECT_DIR$/build.gradle'])
        } 
    }

    // Enable "make project automatically"
    ideaMakeAutomatically = { Node iwsNode ->
        def compilerWsConf = iwsNode.find { it.@name == 'CompilerWorkspaceConfiguration' }

        // Slowly realizing the XML stuff is smart enough to not insert dupes even without an if, but .. scary!
        if (compilerWsConf == null) {
            compilerWsConf = iwsNode.appendNode('component', [name: 'CompilerWorkspaceConfiguration'])
            compilerWsConf.appendNode("option", [name: "MAKE_PROJECT_ON_SAVCE", value: "true"])
        }
    }

    // Generate a run configuration for the project.
    ideaRunConfig = { Node iwsNode ->
        def runManager = iwsNode.find { it.@name == 'RunManager' }

        runManager.append(new XmlParser().parseText('''
            <configuration default="false" name="Mani" type="Application" factoryName="Application">
              <extension name="coverage" enabled="false" merge="false" runner="idea">
                <pattern>
                  <option name="PATTERN" value="com.mani.lang.*"/>
                  <option name="ENABLED" value="true"/>
                </pattern>
              </extension>
              <option name="MAIN_CLASS_NAME" value="com.mani.lang.Mani"/>
              <option name="VM_PARAMETERS" value="-Xms256m -Xmx1536m"/>
              <option name="PROGRAM_PARAMETERS" value=""/>
              <option name="WORKING_DIRECTORY" value="file://$PROJECT_DIR$"/>
              <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false"/>
              <option name="ALTERNATIVE_JRE_PATH" value=""/>
              <option name="ENABLE_SWING_INSPECTOR" value="false"/>
              <option name="ENV_VARIABLES"/>
              <option name="PASS_PARENT_ENVS" value="true"/>
              <module name="PC"/>
              <envs/>
              <RunnerSettings RunnerId="Debug">
                <option name="DEBUG_PORT" value=""/>
                <option name="TRANSPORT" value="0"/>
                <option name="LOCAL" value="true"/>
              </RunnerSettings>
              <RunnerSettings RunnerId="Run"/>
              <ConfigurationWrapper RunnerId="Debug"/>
              <ConfigurationWrapper RunnerId="Run"/>
              <method/>
            </configuration>
        '''))

        runManager.append(new XmlParser().parseText('''
        <list size="1">
        <item index="0" class="java.lang.String" itemvalue="Application.Mani" />
        </list>
        '''))

        def runManagerTag = iwsNode.component.find { it.@name == 'RunManager' }
        runManager.@selected = 'Application.Mani'

    }
}